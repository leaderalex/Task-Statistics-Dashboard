import React, { useState } from 'react';
import { AlertTriangle, User, Clock, ChevronDown, ChevronUp, UserX } from 'lucide-react';
import { TaskList } from './TaskList';

export function UnassignedTasks({ unassignedTasks }) {
  const [isExpanded, setIsExpanded] = useState(true);

  if (!unassignedTasks || unassignedTasks.length === 0) {
    return (
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-8">
        <h2 className="text-xl font-bold text-gray-900 mb-4 flex items-center">
          <UserX className="h-5 w-5 mr-2 text-green-600" />
          –ó–∞–¥–∞—á–∏ –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è
        </h2>
        <div className="text-center py-8">
          <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <UserX className="h-8 w-8 text-green-600" />
          </div>
          <h3 className="text-lg font-medium text-gray-900 mb-2">–û—Ç–ª–∏—á–Ω–æ!</h3>
          <p className="text-gray-600">–í—Å–µ –∑–∞–¥–∞—á–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º</p>
        </div>
      </div>
    );
  }

  // –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
  const completedTasks = unassignedTasks.filter(task => task.isCompleted);
  const inProgressTasks = unassignedTasks.filter(task => 
    task.time_start && task.time_start.trim() !== '' && 
    (!task.time_end || task.time_end.trim() === '')
  );
  const notStartedTasks = unassignedTasks.filter(task => 
    (!task.time_start || task.time_start.trim() === '') &&
    (!task.time_end || task.time_end.trim() === '')
  );

  return (
    <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 mb-8">
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-xl font-bold text-gray-900 flex items-center">
          <UserX className="h-5 w-5 mr-2 text-amber-600" />
          –ó–∞–¥–∞—á–∏ –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ({unassignedTasks.length})
        </h2>
        <button
          onClick={() => setIsExpanded(!isExpanded)}
          className="flex items-center space-x-1 px-3 py-1 text-sm font-medium text-gray-600 hover:text-gray-900 transition-colors duration-150"
        >
          <span>{isExpanded ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å'}</span>
          {isExpanded ? (
            <ChevronUp className="h-4 w-4" />
          ) : (
            <ChevronDown className="h-4 w-4" />
          )}
        </button>
      </div>

      {/* Summary cards */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <div className="flex items-center space-x-2 mb-2">
            <AlertTriangle className="h-5 w-5 text-red-600" />
            <span className="font-medium text-red-800">–ù–µ –Ω–∞—á–∞—Ç—ã–µ</span>
          </div>
          <p className="text-2xl font-bold text-red-900">{notStartedTasks.length}</p>
          <p className="text-sm text-red-600">–¢—Ä–µ–±—É—é—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è</p>
        </div>
        
        <div className="bg-amber-50 border border-amber-200 rounded-lg p-4">
          <div className="flex items-center space-x-2 mb-2">
            <Clock className="h-5 w-5 text-amber-600" />
            <span className="font-medium text-amber-800">–í —Ä–∞–±–æ—Ç–µ</span>
          </div>
          <p className="text-2xl font-bold text-amber-900">{inProgressTasks.length}</p>
          <p className="text-sm text-amber-600">–ù–∞—á–∞—Ç—ã, –Ω–æ –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è</p>
        </div>

        <div className="bg-green-50 border border-green-200 rounded-lg p-4">
          <div className="flex items-center space-x-2 mb-2">
            <User className="h-5 w-5 text-green-600" />
            <span className="font-medium text-green-800">–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ</span>
          </div>
          <p className="text-2xl font-bold text-green-900">{completedTasks.length}</p>
          <p className="text-sm text-green-600">–í—ã–ø–æ–ª–Ω–µ–Ω—ã –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è</p>
        </div>
      </div>

      {isExpanded && (
        <div className="space-y-6">
          {/* Not started tasks */}
          {notStartedTasks.length > 0 && (
            <div>
              <h4 className="text-md font-semibold text-gray-900 mb-3 flex items-center">
                <AlertTriangle className="h-4 w-4 text-red-500 mr-2" />
                –ù–µ –Ω–∞—á–∞—Ç—ã–µ –∑–∞–¥–∞—á–∏ ({notStartedTasks.length})
              </h4>
              <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-4">
                <p className="text-sm text-red-800">
                  <strong>‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω–æ:</strong> –≠—Ç–∏ –∑–∞–¥–∞—á–∏ –Ω–µ –∏–º–µ—é—Ç –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∏ –Ω–µ –Ω–∞—á–∞—Ç—ã. 
                  –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—Ä–æ—á–Ω–æ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö!
                </p>
              </div>
              <TaskList tasks={notStartedTasks.sort((a, b) => {
                const dateA = new Date(a.createTask || 0);
                const dateB = new Date(b.createTask || 0);
                return dateB - dateA;
              })} />
            </div>
          )}

          {/* In progress tasks */}
          {inProgressTasks.length > 0 && (
            <div>
              <h4 className="text-md font-semibold text-gray-900 mb-3 flex items-center">
                <Clock className="h-4 w-4 text-amber-500 mr-2" />
                –ó–∞–¥–∞—á–∏ –≤ —Ä–∞–±–æ—Ç–µ –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ({inProgressTasks.length})
              </h4>
              <div className="bg-amber-50 border border-amber-200 rounded-lg p-4 mb-4">
                <p className="text-sm text-amber-800">
                  <strong>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:</strong> –≠—Ç–∏ –∑–∞–¥–∞—á–∏ –Ω–∞—á–∞—Ç—ã, –Ω–æ –Ω–µ –∏–º–µ—é—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è. 
                  –ö—Ç–æ-—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –Ω–∏–º–∏, –Ω–æ —ç—Ç–æ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è.
                </p>
              </div>
              <TaskList tasks={inProgressTasks.sort((a, b) => {
                const dateA = new Date(a.time_start || 0);
                const dateB = new Date(b.time_start || 0);
                return dateB - dateA;
              })} />
            </div>
          )}

          {/* Completed tasks */}
          {completedTasks.length > 0 && (
            <div>
              <h4 className="text-md font-semibold text-gray-900 mb-3 flex items-center">
                <User className="h-4 w-4 text-green-500 mr-2" />
                –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è ({completedTasks.length})
              </h4>
              <div className="bg-green-50 border border-green-200 rounded-lg p-4 mb-4">
                <p className="text-sm text-green-800">
                  <strong>‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</strong> –≠—Ç–∏ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –Ω–æ –Ω–µ –∏–º–µ–ª–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è. 
                  –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–¥–∞—á.
                </p>
              </div>
              <TaskList tasks={completedTasks.sort((a, b) => {
                const dateA = new Date(a.time_end || 0);
                const dateB = new Date(b.time_end || 0);
                return dateB - dateA;
              })} />
            </div>
          )}

          {/* Statistics by creator */}
          <div className="mt-6 p-4 bg-gray-50 border border-gray-200 rounded-lg">
            <h5 className="font-medium text-gray-900 mb-3">–ö—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á–∏ –±–µ–∑ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:</h5>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
              {Object.entries(
                unassignedTasks.reduce((acc, task) => {
                  const creator = task.created_by_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
                  acc[creator] = (acc[creator] || 0) + 1;
                  return acc;
                }, {})
              ).map(([creator, count]) => (
                <div key={creator} className="flex items-center justify-between p-2 bg-white rounded border">
                  <div className="flex items-center space-x-2">
                    <User className="h-4 w-4 text-gray-400" />
                    <span className="text-sm font-medium text-gray-700">{creator}</span>
                  </div>
                  <span className="text-sm font-bold text-gray-900">{count}</span>
                </div>
              ))}
            </div>
          </div>

          {/* Recommendations */}
          <div className="mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg">
            <h5 className="font-medium text-blue-900 mb-3">üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</h5>
            <div className="space-y-2 text-sm text-blue-800">
              {notStartedTasks.length > 0 && (
                <p>‚Ä¢ –°—Ä–æ—á–Ω–æ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –¥–ª—è {notStartedTasks.length} –Ω–µ –Ω–∞—á–∞—Ç—ã—Ö –∑–∞–¥–∞—á</p>
              )}
              {inProgressTasks.length > 0 && (
                <p>‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∫—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ {inProgressTasks.length} –∑–∞–¥–∞—á–∞–º–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ</p>
              )}
              {completedTasks.length > 0 && (
                <p>‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è - {completedTasks.length} –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è</p>
              )}
              <p>‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å"</p>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}